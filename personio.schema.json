{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/jilleJr/rootless-personio/raw/main/personio.schema.json",
  "$ref": "#/$defs/config",
  "$defs": {
    "auth": {
      "properties": {
        "email": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Email is your account's login email address.",
          "format": "email"
        },
        "password": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Password is your account's login password."
        },
        "cSRFToken": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "CSRFToken is provided by this program when it fails to\nlog in due to them detecting login via new device. You then need to\nrun the program again but with the CSRF (Cross-Site-Request-Forgery)\ntoken and email token."
        },
        "emailToken": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "EmailToken is sent by Personio to your email when it fails to\nlog in due to them detecting login via new device. You then need to\nrun the program again but with the CSRF (Cross-Site-Request-Forgery)\ntoken and email token."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Auth contains configs for how the program should authenticate with Personio."
    },
    "config": {
      "properties": {
        "baseUrl": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "BaseURL is the URL to your Personio instance.\nThis can be with or without the trailing slash.\n\nThe program with later append paths like /login/index\nand /api/v1/attendances/periods when invoking its HTTP\nrequests.\n\nAny query parameters and fragments will get removed.",
          "format": "uri"
        },
        "auth": {
          "$ref": "#/$defs/auth"
        },
        "minimumPeriodDuration": {
          "type": "string",
          "description": "MinimumPeriodDuration is the duration for which attendance periods that\nare shorter than will get skipped when creating or updating attendance.\n\nThe value is a Go duration, which allows values like:\n- 30s\n- 12m30s\n- 2h12m30s"
        },
        "output": {
          "$ref": "#/$defs/outFormat",
          "description": "Output is the format of the command line results.\nThis controls the format of the single command line\nresult output written to STDOUT."
        },
        "log": {
          "$ref": "#/$defs/log"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config is the full configuration file."
    },
    "log": {
      "properties": {
        "format": {
          "$ref": "#/$defs/logFormat",
          "description": "Format is the way the program formats its logging line. The\n\"pretty\" option is meant for humans and is colored, while the\n\"json\" option is meant for easier parsing in logging management\nsystems like for example Kibana or Splunk."
        },
        "level": {
          "$ref": "#/$defs/logLevel",
          "description": "Level is the severity level to filter logs on, where \"trace\"\nis the lowest logging/severity level, and \"panic\" is the\nhighest. The program will only log messages that are equal\nseverity or higher than this value. You can also set this\nto \"disabled\" to turn of logging."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Log contains configs for the command line logging, which compared to the command line output, loggin is written to STDERR and contains small status reports, and is mostly used for debugging."
    },
    "logFormat": {
      "type": "string",
      "enum": [
        "pretty",
        "json"
      ],
      "title": "Logging format",
      "default": "pretty"
    },
    "logLevel": {
      "type": "string",
      "enum": [
        "trace",
        "debug",
        "info",
        "warn",
        "error",
        "fatal",
        "panic",
        "disabled"
      ],
      "title": "Logging level",
      "default": "warn"
    },
    "outFormat": {
      "type": "string",
      "enum": [
        "pretty",
        "json",
        "yaml"
      ],
      "title": "Output format",
      "default": "pretty"
    }
  }
}